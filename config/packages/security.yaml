security:

    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
                
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                username_path: email

        api:
            pattern:   ^/api
            stateless: true
            jwt: ~

        main:
            lazy: true
            provider: app_user_provider
            
            json_login:
                check_path: api_login
                username_path: email
                password_path: password

            form_login:
                # "app_login" is the name of the route created previously
                login_path: app_back_login   # GET => Affiche le formulaire
                check_path: app_back_login   # POST => VÃ©rifier le formulaire
            
            custom_authenticator: App\Security\LoginFormAuthenticator
            
            entry_point: form_login

            logout:
                path: app_back_logout
                # where to redirect after logout
                target: app_back_login

            

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        #? API:
        #* GET 
        - { path: ^/api/category, roles: PUBLIC_ACCESS, methods: GET}

        - { path: ^/api/quiz, roles: PUBLIC_ACCESS, methods: GET }

        - { path: ^/api/perso/quiz, roles: PUBLIC_ACCESS, methods: GET }

        - { path: ^/api/question, roles: PUBLIC_ACCESS, methods: GET }
        
        - { path: ^/api/answer, roles: PUBLIC_ACCESS, methods: GET }
        
        - { path: ^/api/score, roles: PUBLIC_ACCESS, methods: GET }
       
        - { path: ^/api/user, roles: IS_AUTHENTICATED_FULLY, methods: GET }

        #*POST
        # Registration always available
        - { path: ^/api/user, roles: PUBLIC_ACCESS, methods: POST }
        
        # Login always available
        - { path: ^/api/login, roles: PUBLIC_ACCESS, methods: POST }

        - { path: ^/api/user, roles: PUBLIC_ACCESS, methods: POST }
 
        # All the rest of the API need a full authentication
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

        #? BACK:
        - { path: ^/back/login, roles: PUBLIC_ACCESS }

        # Only the admin can reach the backoffice
        - { path: ^/back, roles: ROLE_ADMIN }


    role_hierarchy:

        # ADMIN inherits the USER role
        ROLE_ADMIN: ROLE_USER



when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
